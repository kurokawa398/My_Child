[
	{
    "question":"モジュール間の情報の受渡しがパラメタだけで行われる，結合度が最も弱いモジュール結合はどれか。",
    "answer1": "共通結合",
    "answer2": "制御結合",
    "answer3": "データ結合",
    "answer4": "内容結合",
    "correct": "データ結合",
    "comment": "モジュール結合度とは、モジュール同士の関連性の強さを表し、モジュール結合度が弱いほど関連するモジュールに変更があった場合の影響を受けにくくなるので、モジュールの独立性が高まり保守性が向上します。" 
    },
    {
        "question":"モジュール間やサブシステム間のインタフェースを検証するために行うテストはどれか。",
        "answer1": "運用テスト",
        "answer2": "結合テスト",
        "answer3": "システムテスト",
        "answer4": "単体テスト",
        "correct": "結合テスト",
        "comment": "結合テストは、単体テストが完了した2つ以上のモジュールを組み合わせて動作させることで、モジュール間のインターフェースに関するエラーを検出することを目的としたテスト工程です。テスト手法には、ボトムアップテスト，トップダウンテスト，ビッグバンテストなどがあります。" 
    },
    {
        "question":"外部設計の成果物に基づいて，実現方法や処理効率を考慮しながら，システム開発者の立場から進める設計作業はどれか。",
        "answer1": "画面フロー設計",
        "answer2": "機能分割・構造化",
        "answer3": "コード設計",
        "answer4": "論理データ設計",
        "correct": "機能分割・構造化",
        "comment": "外部設計に成果物に基づく作業なので「システム開発者の立場から進める設計作業」というのは内部設計のことを指しています。" 
    },
    {
        "question":"UML2.0で定義している図のうち，動的な振る舞いを表現するものはどれか。",
        "answer1": "オブジェクト図",
        "answer2": "クラス図",
        "answer3": "シーケンス図",
        "answer4": "パッケージ図",
        "correct": "シーケンス図",
        "comment": "シーケンス図は、オブジェクト間のメッセージの流れを時系列的に表現する図です。つまりメッセージのやり取りによってシステムがどのように遷移していくのかというシステムの動的な部分を表現することが可能です。" 
    },
    {
        "question":"オブジェクト指向において，あるクラスの属性や機能がサブクラスで利用できることを何というか。",
        "answer1": "オーバーライド",
        "answer2": "カプセル化",
        "answer3": "継承",
        "answer4": "多相性",
        "correct": "継承",
        "comment": "継承は、上位のクラスで定義されたデータ構造と手続きを、その下位クラスが引き継いで使える特性をいいます。インヘリタンスともいいます。" 
    },
    {
        "question":"UMLのダイアグラムのうち，インスタンス間の関係を表現するものはどれか。",
        "answer1": "アクティビティ図",
        "answer2": "オブジェクト図",
        "answer3": "コンポーネント図",
        "answer4": "ユースケース図",
        "correct": "オブジェクト図",
        "comment": "オブジェクト図は、ある特定の時点でのオブジェクトのインスタンス間の静的な構造を記述する図です。" 
    },
    {
        "question":"ソフトウェアのテスト方法のうち，ソフトウェア保守のために変更した箇所が，ほかの部分に影響していないかどうかを確認する目的で行うものはどれか。",
        "answer1": "運用テスト",
        "answer2": "結合テスト",
        "answer3": "システムテスト",
        "answer4": "レグレッションテスト",
        "correct": "レグレッションテスト",
        "comment": "レグレッションテストは退行テスト／回帰テストとも呼ばれ、システムに変更作業を実施した場合に、それによって以前まで正常に機能していた部分に不具合や影響が出ていないかを検証するためのテストです。" 
    },
    {
        "question":"オブジェクト指向において，属性と振る舞いを一つにまとめた構造にすることを何というか。",
        "answer1": "カプセル化",
        "answer2": "クラス化",
        "answer3": "集約化",
        "answer4": "汎化",
        "correct": "カプセル化",
        "comment": "オブジェクト指向におけるカプセル化(情報隠ぺい)とは、オブジェクトの独立性を高めるため、内部をブラックボックス化することです。オブジェクトのデータとそれに対する操作をセットで定義し、外部からは特定の手続きだけの使用を許すことで実現します。この概念によって、たとえオブジェクト内部の仕様変更があった場合でも、使う人はそれを気にすることなく以前と同様にオブジェクトを扱えます。" 
    },
    {
        "question":"オブジェクト指向分析を用いてモデリングしたとき，クラスとオブジェクトの関係になる組みはどれか。",
        "answer1": "公園，ぶらんこ",
        "answer2": "公園，代々木公園",
        "answer3": "鉄棒，ぶらんこ",
        "answer4": "中之島公園，代々木公園",
        "correct": "公園，代々木公園",
        "comment": "オブジェクト指向において、クラスはオブジェクトがもつ性質を集めた設計図、オブジェクトは実体(インスタンス)です。例として「人」クラスを考えてみます。人クラスには、人であれば誰もが持つ名前、年齢、性別、身長、体重などの属性が存在するでしょう。ただしクラスは枠組みだけを定義した抽象的な概念であり個別の「人」を表してはいません。この人クラスという枠組みに実際に値を割り当てて実体を示したものがオブジェクトです。" 
    },
    {
        "question":"システム開発の外部設計工程で行う作業はどれか。",
        "answer1": "物理データ設計",
        "answer2": "プログラム構造化設計",
        "answer3": "要求分析",
        "answer4": "論理データ設計",
        "correct": "論理データ設計",
        "comment": "外部設計は、ユーザからのシステム要件をもとにシステムの機能を確定する作業工程です。ユーザの立場からみた業務機能を中心に設計を行うことが目的で、この作業工程の一つとして使用するコード体系を決定するなどの論理データ設計が含まれています。この工程に続く内部設計では、外部設計の要件をコンピュータまたはシステム上でいかに効率よく動作させるかというシステム開発側の視点で設計が行われます。" 
    },
    {
        "question":"トップダウン方式で結合テストを行うとき，特に必要となるものはどれか。",
        "answer1": "エミュレータ",
        "answer2": "スタブ",
        "answer3": "デバッガ",
        "answer4": "ドライバ",
        "correct": "スタブ",
        "comment": "トップダウンテストは、上位のモジュールから下位のモジュールへと順に結合しながらテストをしていく手法です。上位のモジュールから先に検証していくので、未完成の下位モジュールの代わりに上位モジュールからの呼び出しに対して適切な値を返す役割を持つスタブが必要になります。逆に下位モジュールから検証を開始するボトムアップテストでは、未完成の上位モジュールの代わりとなるドライバが必要となります。" 
    },
    {
        "question":"モジュールの内部構造を考慮することなく，仕様書どおりに機能するかどうかをテストする手法はどれか。",
        "answer1": "トップダウンテスト",
        "answer2": "ブラックボックステスト",
        "answer3": "ボトムアップテスト",
        "answer4": "ホワイトボックステスト",
        "correct": "ブラックボックステスト",
        "comment": "ブラックボックステストは、入力と出力だけに着目して様々な入力に対して仕様書どおりの出力が得られるかどうかを確認していく、システムの内部構造とは無関係に外部から見た機能について検証するテスト方法です。テストケースの作成には、同値分割，限界値分析，原因－結果グラフなどの手法があります。" 
    },
    {
        "question": "設計上の誤りを早期に発見することを目的として，作成者と複数の関係者が設計書をレビューする方法はどれか。",
        "answer1": "ウォークスルー",
        "answer2": "机上デバッグ",
        "answer3": "トップダウンテスト",
        "answer4": "並行シミュレーション",
        "correct": "ウォークスルー",
        "comment": "ウォークスルーは、開発者が主体となりエラーの早期発見を目的として設計書やプログラムに誤りがないかを確認するレビュー手法です。開発メンバで実施されることが多く、管理者は原則的に参加させないという特徴があります。" 
    },
    {
        "question": "オブジェクト指向によるシステム開発で利用され，分析から設計，実装，テストまでを統一した表記法はどれか。",
        "answer1": "EAI",
        "answer2": "EJB",
        "answer3": "ERP",
        "answer4": "UML",
        "correct": "UML",
        "comment": "UML(Unified Modeling Language)は、オブジェクト指向開発で用いられる標準表記法群で、「クラス図」「シーケンス図」「ユースケース図」などのようなオブジェクト間の関連や動作・構成を表現する13種の図表から構成されています。EAI" 
    },
    {
        "question": "システム開発において，UMLで用いられる図式はどれか。",
        "answer1": "DFD",
        "answer2": "E-R図",
        "answer3": "クラス図",
        "answer4": "流れ図",
        "correct": "クラス図",
        "comment": "クラス図は、UMLの1つで、クラス、属性、クラス間の関係からシステムの構造を記述する静的な構造図です。" 
    }
        
]
